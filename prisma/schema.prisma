// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?  @db.Text
    access_token      String?  @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    isAdmin       Boolean
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category{
    cid  String @id //Category ID
    label String @unique 
    products Product[]
}


 model Product {
    pid String @id
    name String 
    tags ProductTag[]
    description String
    variants ProductVariant[]
    defaultThumbnail String
    imageSet String[]
    isStore Boolean @default(false)
    shipments Shipment[]
    isImport Boolean @default(false)
    sections ShopSection[]
    categoryId String
    category Category @relation(fields: [categoryId], references: [cid])
    discountId String?
    discount Discount? @relation(fields: [discountId], references: [id])
    updatedAt DateTime @updatedAt @default(now())
 }


model Shipment{
    id        String @id @default(cuid())
    courier   String
    est       String
    cost      Float
    productId String 
    product   Product @relation(fields: [productId], references: [pid], onDelete: Cascade)
}

model ProductVariant{
    vid         String @id
    variantName String
    thumbnail   String
    productId   String
    Product     Product  @relation(fields: [productId], references: [pid], onDelete: Cascade)
    price       Float
    height      Float
    width       Float
}


 model ProductTag{
    label     String 
    productId String
    products  Product  @relation(fields: [productId], references: [pid], onDelete: Cascade)
    @@id([label, productId])
 }


model ShopSection{
    id        String @id @default(cuid())
    label     String @unique
    products  Product[]
    thumbnail String
    description String @default("")
}


model Discount {
    id String @id @default(cuid())
    value Int
    label String 
    products Product[] 
}


model StoreProduct{
    id String @id @default(cuid())
    name String
    description String
    price String
}